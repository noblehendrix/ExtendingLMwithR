#Generate a random variable
#to reproduce results
set.seed(123)
#A single sample
rv.norm<- rnorm(1, mean = 20, sd = 2)
#Calculate probability density of mean = 15 given random sample
den.norm<- dnorm(x = rv.norm, mean = 15, sd = 2)
den.norm
norm.range<- 15:25
den.norm.range<- dnorm(x = rv.norm, mean = norm.range, sd = 2)
den.norm.rang
den.norm.range
#plot the probability density values
plot(norm.range, den.norm.range, type = 'l', xlab = "values", ylab = "Density")
#generate multiple samples from the normal distribution
rv.norm2<- rnorm(20, mean = 20, sd = 2)
#look at histogram of samples
hist(rv.norm2)
den.norm2<- dnorm(x = rv.norm2, mean = 15, sd = 2)
#calculate the product of the densities over all samples
prod(den.norm2)
#calculate the log density instead
log.den.norm2<- dnorm(x = rv.norm2, mean = 15, sd = 2, log = T)
sum(log.den.norm2)
#Calculate probability density of mean = 15...25 given random samples using log density
#calculate length of the range
range.length<- length(norm.range)
#calculate log density = log likelihood (LL)
norm2.LL<- vector(length = range.length)
for(i in 1:11){
norm2.LL[i]<- sum( dnorm(x = rv.norm2, mean = norm.range[i], sd = 2, log = T) )
}
#plot the log density values
plot(norm.range, norm2.LL, type = 'l', xlab = "values", ylab = "Density")
set.seed(123)
rv.norm<- rnorm(1, mean = 20, sd = 2)
#Calculate probability density of mean = 15 given random sample
den.norm<- dnorm(x = rv.norm, mean = 15, sd = 2)
norm.range<- 15:25
den.norm.range<- dnorm(x = rv.norm, mean = norm.range, sd = 2)
den.norm.range
den.norm.range
#plot the probability density values
plot(norm.range, den.norm.range, type = 'l', xlab = "values", ylab = "Density")
plot(x=norm.range, y=den.norm.range,  xlab = "values", ylab = "Density")
#plot the probability density values
plot(x=norm.range, y=den.norm.range,  type = 'l', xlab = "values", ylab = "Density")
rv.norm2<- rnorm(20, mean = 20, sd = 2)
hist(rv.norm2)
den.norm2<- dnorm(x = rv.norm2, mean = 15, sd = 2)
den.norm2
prod(den.norm2)
log.den.norm2<- dnorm(x = rv.norm2, mean = 15, sd = 2, log = T)
sum(log.den.norm2)
range.length<- length(norm.range)
norm2.LL<- vector(length = range.length)
norm.range
#calculate log density = log likelihood (LL)
norm2.LL<- vector(length = range.length)
for(i in 1:11){
norm2.LL[i]<- sum( dnorm(x = rv.norm2, mean = norm.range[i], sd = 2, log = T) )
}
#plot the log density values
plot(norm.range, norm2.LL, type = 'l', xlab = "values", ylab = "Density")
plot(norm.range, norm2.LL, xlab = "values", ylab = "Density")
rv.norm2
Data1 = list( 'Y'= rv.norm2 )
NLL_Norm1(Par = 10, Data1)
#Step 1 - develop function that returns negative log likelihood
NLL_Norm1 = function(Par, Data){
# Parameters
mu = Par
sigma = 2
# Log-likelihood
LL_i = dnorm( Data$Y, mean = mu, sd = sigma, log=TRUE )
NLL = -1 * sum(LL_i)
return( NLL )
}
NLL_Norm1(Par = 10, Data1)
NLL_Norm1(Par = 15, Data1)
vals<- seq(10, 30, by = 2)
NLL.vect<- vector(length = length(vals))
range(vals)
for(i in 1:length(vals)){
NLL.vect[i]<- NLL_Norm1(Par = c(vals[i], 2), Data1)
}
#Plot the NLL values over different hypotheses about value of p
plot(vals, NLL.vect, type = 'l', xlab = "p", ylab = "NLL")
for(i in 1:length(vals)){
NLL.vect[i]<- NLL_Norm1(Par = vals[i], Data1)
}
#what is MLE = Min NLL?
vals[ which(NLL.vect == min(NLL.vect) ) ]
min(NLL.vect)
which(NLL.vect == min(NLL.vect)
)
vals[ which(NLL.vect == min(NLL.vect) ) ]
vals[6]
vals[7]
for(i in 1:length(vals)){
NLL.vect[i]<- NLL_Norm1(Par = vals[i], Data1)
}
plot(vals, NLL.vect, type = 'l', xlab = "p", ylab = "NLL")
Start<- 15
Est = optim( par=Start, fn=NLL_Norm1, Data=Data1)
# Estimated parameters
print( Est$par ) # Estimated parameter
Est
NLL_Norm2 = function(Par, Data){
# Parameters
mu = Par[1]
sigma = Par[2]
# Log-likelihood
LL_i = dnorm( Data$Y, mean = mu, sd = sigma, log=TRUE )
NLL = -1 * sum(LL_i)
return( NLL )
}
NLL_Norm2 = function(Par, Data){
# Parameters
mu = Par[1]
sigma = Par[2]
# Log-likelihood
LL_i = dnorm( Data$Y, mean = mu, sd = sigma, log=TRUE )
NLL = -1 * sum(LL_i)
return( NLL )
}
NLL_Norm2 = function(Par, Data){
# Parameters
mu = Par[1]
sigma = Par[2]
# Log-likelihood
LL_i = dnorm( Data$Y, mean = mu, sd = sigma, log=TRUE )
NLL = -1 * sum(LL_i)
return( NLL )
}
Start2<- c(15, 2.5)
#Step 2 - estimate parameters using optim
Start2<- c(15, 2.5)
Est2 = optim( par=Start2, fn=NLL_Norm2, Data=Data1, hessian=TRUE )
# Estimated parameters
print( Est2$par ) # Estimated parameter
print( Est2$hessian ) #Estimated Hessian matrix
solve(Est2$hessian)
diag( solve(Est2$hessian) )
sqrt(diag( solve(Est2$hessian) ))
cov2cor(solve(Est2$hessian) )
curve(dnorm(x, mean1, stdev), from = 30, to = 80,  col = 2)
#simulate sizes
mean1 <- 45
mean2 <- 55
stdev <- 4
curve(dnorm(x, mean1, stdev), from = 30, to = 80,  col = 2)
curve(dnorm(x, mean1, stdev), from = 30, to = 80,  col = "lightblue")
curve(dnorm(x, mean1, stdev), from = 30, to = 80,  col = 2)
curve(dnorm(x, mean1, stdev), from = 30, to = 80,  col = 2)
curve(dnorm(x, mean2, stdev), from = 30, to = 80, add = TRUE, col = 4)
pop1 <- rnorm(nobs, mean1, sd = stdev)
# samples from the distributions
nobs <- 100
pop1 <- rnorm(nobs, mean1, sd = stdev)
pop2 <- rnorm(nobs, mean2, sd = stdev)
hist(pop1, border = 2, breaks = seq(30,80, by = 2), prob = TRUE, ylim = c(0, 0.15), main = "Size Samples", xlab = "Size")
seq(30,80, by = 2)
hist(pop1, border = 2, breaks = seq(30,80, by = 2), prob = FALSE, ylim = c(0, 0.15), main = "Size Samples", xlab = "Size")
hist(pop1, border = 2, breaks = seq(30,80, by = 2), prob = TRUE, ylim = c(0, 0.15), main = "Size Samples", xlab = "Size")
rug(pop1, col = 2)
rug(pop1, col = 6)
hist(pop2, border = 4, breaks = seq(31,81, by = 2), prob = TRUE, add = TRUE)
rug(pop2, col = 7)
legend("topright", c("North", "South"), col = c(4,2), lwd = c(1,1))
#Construct a dataset
Dat1 <- list(Y = pop1)
Dat2 <- list(Y = pop2)
NLL_Norm3 = function(Par, Data1, Data2){
# Parameters
mu1 = Par[1]
mu2 = Par[2]
sigma = Par[3]
# Log-likelihoods
LL1 = dnorm( Data1$Y, mean = mu1, sd = sigma, log=TRUE )
LL2 = dnorm( Data2$Y, mean = mu2, sd = sigma, log=TRUE )
NLL = -1 * sum(LL1, LL2)
return( NLL )
}
Start3<- c(40, 50, 3)
NLL_Norm3(Start3, Data1 = Dat1, Data2 = Dat2)
Est3 = optim( par=Start3, fn=NLL_Norm3, Data1=Dat1, Data2 = Dat2, hessian=TRUE)
print( Est3$par )
print( Est3$hessian )
print( sqrt(diag( solve(Est3$hessian) )) )
Est3
all.data <- list(Y = c(pop1, pop2))
all.data
Start2<- c(40, 2.5)
Est3a = optim( par=Start2, fn=NLL_Norm2, Data=all.data, hessian=TRUE )
print( Est3a$par )
print( Est3a$hessian ) #Estimated Hessian matrix
print( sqrt(diag( solve(Est3a$hessian) )) )
Est3$val
Est3a$val
2*(-Est3$val - (-Est3a$val))
p.val <- pchisq(D.val, df = 1, lower.tail = FALSE)
D.val <- 2*(-Est3$val - (-Est3a$val))
#compare to Chi-sq with df_alt - df_simple = 3 - 2 = 1 df
p.val <- pchisq(D.val, df = 1, lower.tail = FALSE)
p.val
#plot the sample and the distributions implied by the results
hist(pop1, border = 2, breaks = seq(30,80, by = 2), prob = TRUE, ylim = c(0, 0.15), main = '', xlab = "Size")
rug(pop1, col = 2)
hist(pop2, border = 4, breaks = seq(31,81, by = 2), prob = TRUE, add = TRUE)
rug(pop2, col = 4)
#legend("topright", c("North", "South"), col = c(4,2), lwd = c(1,1))
curve(dnorm(x, Est3$par[1], Est3$par[3]), from = 30, to = 80,  col = 2, add = TRUE, lwd = 2)
curve(dnorm(x, Est3$par[2], Est3$par[3]), from = 30, to = 80, add = TRUE, col = 4, lwd = 2)
curve(dnorm(x, Est3a$par[1], Est3a$par[2]), from = 30, to = 80, add = TRUE, col = 1, lwd = 2)
legend("topright", c("North", "South", "Combined"), col = c(4,2,1), lwd = c(1,1,1))
