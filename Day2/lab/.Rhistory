TN <- read.table("TeethNitrogen.txt", header = TRUE)
#subset the data to just analyze the data for the single whale "Moby"
Moby <- subset(TN, Tooth == "Moby")
names(Moby)<- c("N", "Age", "Tooth")
#plot the data
plot(y = Moby$N, x = Moby$Age,  xlab = "Estimated age", ylab = expression(paste(delta^{15}, "N")) )
#note use of expression() that can be used to include greek symbols
# fit a model to the Moby data set
moby1<- lm(N~Age, data = Moby)
#plot the model
abline(moby1)
#view the model output
moby1
#Evaluate model for: homogeneity, normality, independence
# Let's plot the residuals versus fitted values (homogeneity)
plot(moby1$fitted, moby1$res)
abline(h=0)
# Histogram and qqnorm plot (normality)
par(mfrow = c(2,1))
hist(moby1$res)
qqnorm(moby1$res)
abline(0,1)
par(mfrow = c(1,1))
plot(moby1$res, Moby$Age)
qqnorm(moby1$res)
abline(0,1)
?qqline
qqline(moby1$res, distribution = qnorm)
par(mfrow = c(2,1))
hist(moby1$res)
qqnorm(moby1$res)
qqline(moby1$res, distribution = qnorm)
shapiro.test(moby1$res)
acf(moby1$residuals)
#simulate data
#two covariates and their interaction plus a quadratic of the first covariate
nobs <- 250
set.seed(123)
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
x3 <- x1*x2
x4 <- x1*x1
x0 <- rep(1, times = nobs)
#simulate data
#two covariates and their interaction plus a quadratic of the first covariate
nobs <- 250
set.seed(123)
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
#interaction term
x3 <- x1*x2
#quadratic term
x4 <- x1*x1
x0 <- rep(1, times = nobs)
#construct a matrix of covariates
X.mat <- cbind(x0, x1, x2, x3, x4)
#vector of regression parameters
beta <- c(5, 2, -1, 0.7, -0.5)
##underlying dynamics
#the quadratic relationship
curve(beta[1] + beta[2]*x +beta[5]*x*x, from = -2, to = 2)
curve(beta[1] + beta[2]*x +beta[5]*x*x, from = -2, to = 2, xlab = "Y", ylab = "X1")
par(mfrow=c(1,1))
curve(beta[1] + beta[2]*x +beta[5]*x*x, from = -2, to = 2, ylab = "Y", xlab = "X1")
#the interaction effect - a curved surface
x <- seq(-2, 2, length= 30)
y <- x
f <- function(x, y) { beta[1] + beta[2]*x + beta[3]*y + beta[4]*x*y }
z <- outer(x, y, f)
op <- par(bg = "white")
persp(x, y, z, theta = 5, phi = 30, expand = 0.5, col = "lightblue", xlab = "X1", ylab = "X2", zlab = "Mean Obs")
#compare this to no interaction effect - a flat surface
f2 <- function(x, y) { beta[1] + beta[2]*x + beta[3]*y}
z2 <- outer(x, y, f2)
op <- par(bg = "white")
persp(x, y, z2, theta = 5, phi = 30, expand = 0.5, col = "pink1", xlab = "X1", ylab = "X2", zlab = "Mean Obs")
mean.vec <- X.mat %*% beta
##calculate the observed values with measurement error
obs <- mean.vec + rnorm(nobs, mean = 0, sd = 2)
#construct a dataframe to make it easier to model
sim.df <- data.frame(Obs = obs, X1 = x1, X2 = x2)
pairs(sim.df)
#start modeling with lm
mlm1<-lm(Obs ~ X1 + X2, data = sim.df)
summary(mlm1)
mlm2<- lm(Obs ~ X1 + X2 + X1:X2, data = sim.df)
#compare the two models
anova(mlm1, mlm2)
#add a quadratic term for X1, use update()
mlm3 <- update(mlm2, .~. + I(X1^2))
summary(mlm3)
#add a quadratic term for X2
mlm4 <- update(mlm3, .~. + I(X2^2))
summary(mlm4)
#backwards model selection by drop1
drop1(mlm4, test = "F")
E.sim<- rstandard(mlm3)
plot(mlm3)
E.sim<- rstandard(mlm3)
hist(E.sim)
qqnorm(E.sim)
qqline(E.sim)
plot(y = E.sim, x = sim.df$X1, xlab = "X1", ylab = "Residuals")
abline(0,0)
plot(E.sim, x = sim.df$X2, xlab = "X2", ylab = "Residuals")
abline(0, 0)
Z1<- rnorm(100, mean = 500, sd = 200)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 5000, sd = 2000)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 1e+6, sd = 2e+5)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 1e+10, sd = 2e+5)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 1e+10, sd = 2e+5)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 1e+10, sd = 2e+5)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
Z1<- rnorm(100, mean = 1e+10, sd = 2e+5)
Z2<- rnorm(100, mean = 0.005, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
lm(Y1 ~ scale(Z1) + scale(Z2))
Z1<- rnorm(100, mean = 0, sd = 2e+5)
Z2<- rnorm(100, mean = 0, sd = 0.001)
Y1 <- rnorm(100, mean = 3 + Z1*0.005 + Z2*1000)
lm(Y1~Z1 + Z2)
lm(Y1 ~ scale(Z1) + scale(Z2))
Loyn <- read.table("Loyn.txt", header = TRUE)
#create a factor for the GRAZE covariate
Loyn$fGRAZE <- factor(Loyn$GRAZE)
#log transforming several covariates
Loyn$L.AREA<-log10(Loyn$AREA)
Loyn$L.DIST<-log10(Loyn$DIST)
Loyn$L.LDIST<-log10(Loyn$LDIST)
# can use scale() to scale and center covariates as well
Z<-cbind(Loyn$ABUND,Loyn$L.AREA,Loyn$L.DIST,Loyn$L.LDIST,Loyn$YR.ISOL,Loyn$ALT,Loyn$GRAZE)
colnames(Z)<-c("ABUND","L.AREA","L.DIST","L.LDIST","YR.ISOL","ALT","GRAZE")
#define the histogram panel function
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "gray", ...)
}
#define the panel.cor function
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex =  1)
}
#pairs plot with correlation coefficients
pairs(Z, upper.panel=panel.cor,diag.panel=panel.hist)
#start with this model -
M1 <- lm(ABUND ~ L.AREA + L.DIST + L.LDIST + YR.ISOL + ALT +
fGRAZE, data = Loyn)
summary(M1)
anova(M1)
M2 <- lm(ABUND ~ L.AREA + L.DIST + L.LDIST + YR.ISOL + ALT, data = Loyn)
anova(M1, M2)
drop1(M1,test="F")
anova(M1)
#a selected model given the backwards selection approach
M3 <- lm(ABUND ~ L.AREA + fGRAZE, data = Loyn)
#run an automatic stepwise backwards selection using AIC
step(M1)
anova(M1, M3)
op <- par(mfrow = c(2, 2))
plot(M3) #standard graphical output
op <- par(mfrow = c(2, 2))
#Check for normality
E <- rstandard(M3)
hist(E)
#qqnorm(E)
#Check for independence: residuals versus individual #explanatory variables
plot(y = E, x = Loyn$L.AREA, xlab = "AREA", ylab = "Residuals")
abline(0,0)
plot(E ~ Loyn$fGRAZE, xlab = "GRAZE", ylab = "Residuals")
abline(0, 0)
par(op)
plot(Loyn$L.AREA,Loyn$ABUND)
par(mfrow = c(1,1))
E <- rstandard(M3)
hist(E)
plot(y = E, x = Loyn$L.AREA, xlab = "AREA", ylab = "Residuals")
abline(0,0)
E <- rstandard(M3)
hist(E)
plot(y = E, x = Loyn$L.AREA, xlab = "AREA", ylab = "Residuals")
abline(0,0)
plot(E ~ Loyn$fGRAZE, xlab = "GRAZE", ylab = "Residuals")
abline(0, 0)
plot(Loyn$L.AREA,Loyn$ABUND)
